<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Be Hacker | Login</title>
  <style>
    body {
      font-family: "Courier New", monospace;
      margin: 0;
      padding: 0;
      background: #000;
      color: #fff;
      min-height: 100vh;
      display: grid;
      place-items: center;
    }
    #matrix-canvas {
      position: fixed;
      inset: 0;
      width: 100vw; height: 100vh;
      z-index: -2;
      background: #000;
      pointer-events: none;
    }
    body::before {
      content: "";
      position: fixed;
      inset: 0;
      background: rgba(0,0,0,0.85);
      z-index: -1;
    }
    .card {
      width: min(420px, 92vw);
      background: rgba(0,0,0,0.85);
      border: 1px solid #0f0;
      border-radius: 12px;
      padding: 22px;
      box-shadow: 0 0 24px #0f0, 0 0 32px rgba(255,0,0,0.3);
    }
    h1 {
      margin: 0 0 14px 0;
      color: #0f0;
      text-transform: uppercase;
      text-shadow: 0 0 15px #0f0, 0 0 30px #0f0;
      font-size: 1.6rem;
      text-align: center;
    }
    .subtitle { text-align: center; color: #aaa; margin-bottom: 18px; }
    label { display: block; margin: 12px 0 6px; color: #0f0; }
    input[type="text"], input[type="password"] {
      width: 100%;
      background: #000;
      color: #0f0;
      border: 1px solid red;
      border-radius: 6px;
      padding: 10px 12px;
      outline: none;
      box-shadow: inset 0 0 10px #0f0;
    }
    .actions {
      display: flex;
      gap: 10px;
      align-items: center;
      margin-top: 16px;
    }
    button {
      background: red;
      color: #fff;
      border: 2px solid #0f0;
      border-radius: 6px;
      padding: 10px 14px;
      font-weight: bold;
      cursor: pointer;
      transition: 0.25s;
      text-shadow: 0 0 6px #0f0;
    }
    button:hover { background: darkred; box-shadow: 0 0 14px red; }
    .link { color: #0f0; text-decoration: none; }
    .link:hover { color: red; text-shadow: 0 0 8px red; }
    .msg { margin-top: 12px; color: #0f0; min-height: 1.2em; text-align: center; }
  </style>
  <link rel="icon" href="data:," />
  <meta name="color-scheme" content="dark" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="robots" content="noindex" />
</head>
<body>
  <script>
    try { if (localStorage.getItem('currentUser')) { window.location.replace('Be Hacker.html'); } } catch(e) {}
  </script>
  <canvas id="matrix-canvas"></canvas>
  <div class="card">
    <h1>Be Hacker • Login</h1>
    <div class="subtitle">Access granted to members only</div>
    <form id="login-form" autocomplete="off">
      <label for="login-id">Username or Email</label>
      <input id="login-id" name="loginId" type="text" placeholder="neo or neo@matrix.com" required />

      <label for="login-pass">Password</label>
      <input id="login-pass" name="password" type="password" placeholder="••••••••" required />

      <div class="actions">
        <button type="submit">Log In</button>
        <a class="link" href="signup.html">Create account</a>
        <a class="link" href="Be Hacker.html">Back</a>
      </div>
      <div id="msg" class="msg"></div>
    </form>
  </div>

  <script>
    // Matrix rain background
    const canvas = document.getElementById('matrix-canvas');
    const ctx = canvas.getContext('2d');
    const katakana = 'アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワン';
    const latin = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    const nums = '0123456789';
    const alphabet = katakana + latin + nums;
    let columns = [];
    function resizeCanvas() {
      canvas.width = window.innerWidth; canvas.height = window.innerHeight;
      const columnWidth = 16; const numColumns = Math.floor(canvas.width / columnWidth);
      columns = new Array(numColumns).fill(0);
    }
    resizeCanvas(); window.addEventListener('resize', resizeCanvas);
    (function draw(){
      ctx.fillStyle = 'rgba(0,0,0,0.08)'; ctx.fillRect(0,0,canvas.width,canvas.height);
      ctx.font = '16px Courier New, monospace';
      columns.forEach((y,i)=>{ const ch = alphabet.charAt(Math.floor(Math.random()*alphabet.length));
        ctx.fillStyle = '#0f0'; ctx.fillText(ch, i*16, y);
        const threshold = 100 + Math.random()*1000; columns[i] = y > canvas.height + threshold ? 0 : y + 16; });
      requestAnimationFrame(draw);
    })();

    // Simple localStorage auth (demo only)
    function readUsers() {
      try { return JSON.parse(localStorage.getItem('users') || '[]'); } catch(e) { return []; }
    }
    function setCurrentUser(user) { localStorage.setItem('currentUser', JSON.stringify(user)); }
    const form = document.getElementById('login-form');
    const msg = document.getElementById('msg');
    form.addEventListener('submit', function(e){
      e.preventDefault(); msg.textContent = '';
      const id = document.getElementById('login-id').value.trim();
      const pass = document.getElementById('login-pass').value;
      const users = readUsers();
      const user = users.find(u => u.username.toLowerCase() === id.toLowerCase() || u.email.toLowerCase() === id.toLowerCase());
      if(!user) { msg.textContent = 'User not found.'; msg.style.color = 'red'; return; }
      if(user.password !== pass) { msg.textContent = 'Invalid password.'; msg.style.color = 'red'; return; }
      setCurrentUser({ username: user.username, email: user.email });
      msg.textContent = 'Access granted. Redirecting...'; msg.style.color = '#0f0';
      setTimeout(()=>{ window.location.href = 'Be Hacker.html'; }, 600);
    });
  </script>
</body>
</html>

